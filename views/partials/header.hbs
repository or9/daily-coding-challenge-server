<header>
	<h1>Daily Coding Challenge</h1>
	<auth-form></auth-form>
</header>

<template id="or9-auth-form">
	<form id="header-login-form" 
	method="POST" 
	action="/api/login"
	onsubmit="this.submit">
		<input id="usernameField" 
		value=""
		placeholder="User name"
		onchange="this.validateUsername"
		required
		/>
		
		<input id="passwordField"
		value=""
		type="password"
		placeholder="Password"
		min="8"
		onchange="this.validatePassword"
		required
		/>
		
		<input id="passwordAgainField"
		value=""
		type="password"
		placeholder="Password confirmation"
		min="8"
		onchange="this.validatePasswordMatch"
		required
		/>
		<button type="submit" onclick="this.login">Login</button>
		<button type="submit" onclick="this.register">Register</button>
	</form>
</template>

<script type="module">
	// export const util from "./util.mjs"
	// export const or9 = {
	// 	util: import from ""
	// };
	export const or9Mix = _or9Mix;
	
	/**
	 * Provides a means of composing classes based on any number of mixins
	 * 
	 * @param Superclass {class} - Single class to extend
	 * @returns mixinBuilder {Object}
	 * @returns mixinBuilder.mixin {Function}
	 */
	function _or9Mix (Superclass) {
		// @Superclass Class

		return {
			/**
			 * @module mixinBuilder
			 * @param ...mixins {arguments}
			 * @returns ComposedClass {class} - Class based on Superclass and any number of mixins
			 */
			mixin (...mixins) {
				return mixins.reduce((curr, acc) => acc(curr), Superclass)
			}
		};
	}

	/**
	 * Base functionality for identifying event handlers from the template's markup
	 * and proxying behavior to instance
	 */
	function or9CustomElementMixin (Superclass) {
		return class extends Superclass {
			constructor (...args) {
				super(args);

				this.attachShadow({ mode: "open" })
					.appendChild(this.constructor.template.content.cloneNode(true));

				this.shadowRoot.querySelectorAll("*")
				.forEach((element) => {

					element.getAttributeNames()
					.filter((attr) => /^on/.test(attr))
					.forEach((attr) => {
						const handler = element.getAttribute(attr);
						if (/^this\./.test(handler)) {
							const instanceMethod = handler.replace(/^this\./, "");
							element[attr] = this[instanceMethod].bind(this);
						} else {
							console.warn(attr, "will not be handled by this");
						}
					});
				})

				return this;
			}

			$ (queryStr) {
				return this.shadowRoot.querySelectorAll(queryStr);
			}

			static get template () {
				return document.querySelector(`#or9-${this.is}`);
			}
		}
	}

	export class AuthForm extends HTMLElement {
		
		constructor (...args) {
			super(args);
			// self.addEventListener, etc
			
			// console.log("this con tmpl content?", this.constructor.template.content);
			this.attachShadow({ mode: "open" })
				.appendChild(this.constructor.template.content.cloneNode(true));
			
			this._ = this.shadowRoot;

			this._.querySelectorAll("*")
			.forEach((element) => {
				// console.log("looping element", element);

				element.getAttributeNames()
				.filter((attr) => /^on/.test(attr))
				.forEach((attr) => {
					// console.log("el with on[something]", attr);
					// select attrs matchine /^on/
					// set value of on[something]=[thispart]
					// to this[thispart]
					// console.log(element.getAttribute(attr));
					const handler = element.getAttribute(attr);
					if (/^this\./.test(handler)) {
						const instanceMethod = handler.replace(/^this\./, "");
						element[attr] = this[instanceMethod].bind(this);
						// console.log(element.getAttribute(attr));
					}
				});
			})

			return this;
		}

		$ (queryStr) {
			return this.shadowRoot.querySelectorAll(queryStr);
		}

		connectedCallback () {
			// connected to DOM
			console.log("what's this usernameField?", this._.querySelector("#usernameField"));
			this.passwordAgainField = this._.querySelector("#passwordAgainField");
			this._.querySelector("#passwordAgainField").parentNode.removeChild(this.passwordAgainField);
		}

		disconnectedCallback () {
			// disconnected from DOM
		}

		adoptedCallback () {
			// element moved to a new doc
		}

		attributeChangedCallback (attrName, oldVal, newVal) {
			// called each time an observed attr is added, removed or changed
			// observations declared in static get observedAttributes
		}

		login (event) {
			console.log("#login", event);
			// event.preventDefault();

			const form = this.shadowRoot.querySelector("#header-login-form");

			const passwordConfirmationField = form.querySelector("#passwordAgainField");
			if (passwordConfirmationField) {
				console.log("#login removing password conrirmation field");
				passwordConfirmationField
					.parentNode
					.removeChild(passwordConfirmationField);
			}

			form.action = this.constructor.properties.form.LOGIN.ACTION;
			form.method = this.constructor.properties.form.LOGIN.METHOD;
			form.onsubmit = this.submit;
			// form.submit();
			// return false;
		}

		register (event) {
			console.log("#register", event);
			// event.preventDefault();
			const passwordField = this._.querySelector("#passwordField");
			passwordField
				.parentNode
				.insertBefore(this.passwordAgainField, passwordField);

			passwordField
				.parentNode
				.insertBefore(passwordField, this.passwordAgainField);

			this.passwordAgainField.focus();

			const vals = {
				CONFIRM_REGISTRATION: "Confirm registration",
				REGISTER: "Register",
				PENDING: "Registration pending",
			};

			const registerBtn = event.path[0];
			const form = this.shadowRoot.querySelector("#header-login-form");
			
			if (form.reportValidity()) {
				registerBtn.innerHTML = vals.PENDING;
				this._.querySelectorAll("input")
					.forEach((inputElement) => inputElement.disabled = true);
			} else {
				registerBtn.innerHTML = vals.CONFIRM_REGISTRATION;
			}

			form.action = this.constructor.properties.form.REGISTER.ACTION;
			form.method = this.constructor.properties.form.REGISTER.METHOD;

		}

		submit (event) {
			console.log("#submit", event);
			event.preventDefault();
			const form = event.path[0];
			// const form = this.shadowRoot.querySelector("#header-login-form");
			console.log("form? ", form);
			
			if (form.reportValidity()) {
				form.submit();
			}

			return false;
		}

		validateUsername (event) {
			console.log("#validateUsername", event.target);
			event.target.reportValidity();
		}

		validatePassword (event) {
			console.log("#validatePassword", event);
			event.path[0].reportValidity();
		}

		validatePasswordMatch (event) {
			console.log("#validatePasswordMatch", event);
			event.path[0].reportValidity();
			// if length is the same on-input, validate
			// otherwise, on change, validate
		}

		static get properties () {
			return {
				form: {
					LOGIN: {
						ACTION: "/api/login",
						METHOD: "POST",
					},
					REGISTER: {
						ACTION: "/api/register",
						METHOD: "POST",
					}
				}
			};
		}

		static get observedAttributes () {
			// return [];
		}

		static login (event) {
			console.log("hey I'm logging in. get out of my way.", event);
		}

		static get template () {
			return document.querySelector(`#or9-${this.is}`);
		}

		static get is () {
			return "auth-form";
		}
	}

	customElements.define(AuthForm.is, AuthForm);
</script>
